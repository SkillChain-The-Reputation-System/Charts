classDiagram
    class UserManager {
       %% mapping(user_address: address => User)
      -mapping users 
      %% mapping(username: string => bool)
      -mapping username_taken

      +setUserPersonalData(string _username, string _avatar_url, string _bio_url) void
      +setUsername(string _username) void
      +setAvatar(string _avatar_url) void
      +setBio(string _bio_url) void
      +getUsername(address user_address) string
      +getAvatar(address user_address) string
      +getBio(address user_address) string
      +checkUsernameAvailable(string _username) bool
    }

    class User {
      +username: string
      +avatar_url: string
      +bio_url: string
    }
    
    class ChallengeManager {
      %% mapping(challenge_id:uint256 => Challenge)
      -mapping challenges
      %% mapping(challenge_id:uint256 => ReviewPool)
      -mapping review_pools
      %% mapping(contributor_addr:address => uint256[])
      -mapping contributor_to_challenges
      %% mapping(moderator_addr:address => uint256[])
      -mapping moderator_to_challenges
      %% mapping(challenge_id:uint256 => AggregatedMeta)
      -mapping challenge_to_aggregated_meta

      +total_challenges: uint256
      +pending_challenges: uint256
      +REVIEW_QUORUM: uint256
      +REVIEW_THRESHOLD: uint256
      +NUMBER_OF_QUALITY_FACTORS: uint256
      +MAX_DOMAINS: uint256
      +MAX_DIFFICULTY_LEVEL: uint256

      %% CONTRIBUTION
      +contributeChallenge(string _title_url, string _description_url, string _category, string _contribute_at) void

      %% MODERATION
      +finalizeChallenge(uint256 _challenge_id) void
      +joinReviewPool(uint256 _challenge_id) void
      +submitModeratorReview(uint256 _challenge_id, ....) void

      %% GETTER
      +getChallengeById(uint256 _challenge_id) Challenge
      +getChallengesByContributor(address _contributor_address) Challenge[]
      +getPendingChallenges( ) Challenge[]

      +getChallengesByModerator(address _moderator_address) Challenge[]
      +getModeratorReviewOfChallenge(uint256 challenge_id, address _moderator_address) ModeratorReview
      +getJoinReviewPoolStatus(uint256 _challenge_id, address _moderator_address) bool
      +getReviewQuorum( ) uint256
      +getChallengeFinalizedStatus(uint256 _challenge_id) bool
    }

    class Challenge {
      +string id
      +address contributor
      +string title_url
      +string description_url
      +string category
      +uint256 time_created
      +ChallengeStatus status
      +uint256 quality_score
      +DifficultyLevel difficulty_level
      +uint256 solve_time
      +string[] tags
    }

    class ModeratorReview {
      +address moderator
      +uint256 challenge_id
      +uint256 review_time
      +bool relevance
      +bool technical_correctness
      +bool completeness
      +bool clarity
      +bool originality
      +bool unbiased
      +bool plagiarism_free
      +DifficultyLevel suggested_difficulty
      +Category suggested_category
      +number suggested_solve_time
      +string[] suggested_tags
    }


    class ReviewPool {
      +address[] moderator_list
      +bool is_finalized
      +uint256 review_count
      %% mapping(moderator_address:address => ModeratorReview)
      +mapping moderator_reviews
      %% mapping(moderator_address:address => bool)
      +mapping moderator_to_join_status
    }

    class AggregatedMeta {
      +uint256[] difficulty_weight
      +uint256[] category_weight
      +uint256 estimated_solve_time
    }


    %% Enumerations as classes with <<enumeration>> stereotype
    class ChallengeStatus {
      <<enumeration>>
      +PENDING
      +APPROVED
      +REJECTED
    }
    class DifficultyLevel {
      <<enumeration>>
      +EASY
      +MEDIUM
      +HARD
    }
    class Category {
      <<enumeration>>
      +COMPUTER_SCIENCE_FUNDAMENTALS
      +SOFTWARE_DEVELOPMENT
      +SYSTEMS_AND_NETWORKING
      +CYBERSECURITY
      +DATA_SCIENCE_AND_ANALYTICS
      +DATABASE_ADMINISTRATION
      +QUALITY_ASSURANCE_AND_TESTING
      +PROJECT_MANAGEMENT
      +USER_EXPERIENCE_AND_DESIGN
      +BUSINESS_ANALYSIS
      +ARTIFICIAL_INTELLIGENCE
      +BLOCKCHAIN_AND_CRYPTOCURRENCY
      +NETWORK_ADMINISTRATION
      +CLOUD_COMPUTING
    }
    
    
    %% Relationships among Primary Domain Classes
    UserManager *-- User 
    ChallengeManager *-- Challenge 
    ChallengeManager *-- ReviewPool 
    ChallengeManager *-- AggregatedMeta
    ReviewPool *-- ModeratorReview 
    Challenge --> ChallengeStatus 
    Challenge --> DifficultyLevel 
    Challenge --> Category 
    ModeratorReview --> DifficultyLevel
    ModeratorReview --> Category